<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.nz.springBootDemo.mapper.ToDoMapper">
  <resultMap id="BaseResultMap" type="co.nz.springBootDemo.model.ToDo">
    <id column="id" jdbcType="INTEGER" property="id" javaType="integer"/>
    <id column="completed" jdbcType="BIT" property="completed" javaType="boolean"/>
    <id column="text" jdbcType="LONGVARCHAR" property="text" javaType="string"/>
<!--    <result column="completed" jdbcType="BIT" property="completed" javaType="boolean"/>-->
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="co.nz.springBootDemo.model.ToDo">
    <result column="text" jdbcType="LONGVARCHAR" property="text" javaType="string"/>
  </resultMap>

<!--  <resultMap id="BaseResultMap" type="some.package.MyClass" autoMapping="true">-->
<!--    <id property="classId" column="class_id" javaType="integer"/>-->
<!--    <collection property="students" ofType="some.package.Student" autoMapping="true">-->
<!--      <id property="studentId" column="student_id" javaType="integer"/>-->
<!--    </collection>-->
<!--  </resultMap>-->



  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, completed
  </sql>
  <sql id="Blob_Column_List">
    text
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="co.nz.springBootDemo.model.ToDoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from to_do
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
<!--  <select id="selectByExample" parameterType="co.nz.springBootDemo.model.ToDoExample" resultMap="BaseResultMap">-->
<!--    select-->
<!--    <if test="distinct">-->
<!--      distinct-->
<!--    </if>-->
<!--    <include refid="Base_Column_List" />-->
<!--    from to_do-->
<!--    <if test="_parameter != null">-->
<!--      <include refid="Example_Where_Clause" />-->
<!--    </if>-->
<!--    <if test="orderByClause != null">-->
<!--      order by ${orderByClause}-->
<!--    </if>-->
<!--  </select>-->

<!--  parameterType="co.nz.springBootDemo.model.ToDo"-->
  <select id="selectByExample"  resultType="co.nz.springBootDemo.model.ToDo" >
    SELECT *
    FROM to_do
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from to_do
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from to_do
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="co.nz.springBootDemo.model.ToDoExample">
    delete from to_do
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="co.nz.springBootDemo.model.ToDo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into to_do (id, completed, text)
    values (#{id,jdbcType=INTEGER},#{completed,jdbcType=BIT}, #{text,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="co.nz.springBootDemo.model.ToDo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into to_do
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="completed != null">
        completed,
      </if>
      <if test="text != null">
        text,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="completed != null">
        #{completed,jdbcType=BIT},
      </if>
      <if test="text != null">
        #{text,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="co.nz.springBootDemo.model.ToDoExample" resultType="java.lang.Long">
    select count(*) from to_do
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update to_do
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.completed != null">
        completed = #{record.completed,jdbcType=BIT},
      </if>
      <if test="record.text != null">
        text = #{record.text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update to_do
    set id = #{record.id,jdbcType=INTEGER},
      completed = #{record.completed,jdbcType=BIT},
      text = #{record.text,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update to_do
    set id = #{record.id,jdbcType=INTEGER},
      completed = #{record.completed,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="co.nz.springBootDemo.model.ToDo">
    update to_do
    <set>
      <if test="completed != null">
        completed = #{completed,jdbcType=BIT},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="co.nz.springBootDemo.model.ToDo">
    update to_do
    set completed = #{completed,jdbcType=BIT},
      text = #{text,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="co.nz.springBootDemo.model.ToDo">
    update to_do
    set completed = #{completed,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>